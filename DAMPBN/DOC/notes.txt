Name:

Not sure yet.

==============================================================================
What is it?  
==============================================================================

It's a hyper-casual game that's not unlike some of the color-by-number like
programs that show up on mobile platforms (Cross Stitch World is the first
one that comes to mind since I played it the most).  The goal is just to 
fill in all of the squares with the appropriate color using the provided
palette.  Initially, images will be supported up to 320x240 (so they can
be shown completely on screen once they're complete), and support 
palettes of up to 64 colors.  Each image will contain its own palette, which
includes the 64 colors, an additional 128 colors for highlighting (that is,
to draw cross stitch style Xs or diamond painting squares), and 64 system
colors used to draw the UI and such.  The 64 color system palette is fixed
but the additional colors are unique to each picture.

==============================================================================
Features:
==============================================================================

 - Up to 320x240 images to work on
 - Up to 64 colors in an image
 - Images include their category so they can be organized
 - Tracks total progress, mistakes, elapsed time
 - Highlights incorrectly colored squares
 - Optional ability to highlight all squares of the currently active
   color being worked on
 - Overview image shows position of the image visible on the display.
   Each pixel in the overview shows status for that small region of
   the picture:
     - green: complete, all squares are colored correctly
     - red: complete, one or more squares are colored incorrectly
     - blue: region is in progress
     - black: no squares in this region have been worked on yet
 - Fully keyboard driven interface, so no mouse required.
 - Gallery mode, to view pictures that you've finished
 - The game keeps track of not only finished pieces, but the ordering
   in which the player worked on them, so you can get a quick 'replay'
   of the progress of the image while looking at it in gallery mode
 - UI themes (different sets of colors for UI elements, using pre-defined
   color sets built into the system palette) 

==============================================================================   
Keys:
==============================================================================

  - up/down/left/right - move cursor inside the draw area
  - SHIFT + up/down/left/right - move draw area by one page (20 tiles) inside 
    the draw area
  - Space - color the current draw location with the selected color, or erase
            the color if it already exists.
  - Backspace - remove the color from the draw location
  - [ / ] - move up and down through the palette
  - P - switch palette pages
  - S - save
  - L - load
  - U - undo last color placement
  - R - redo last undone color placement
  - O - options screen
  - M - mark all squares of the selected color with a highlight
  - T - reset image progress.  Requires confirmation!
  - H - Help screen
  - X / Escape - Exit to the main menu.  Prompts for save
  - I - Toggle highlight of unmarked squares of the current palette color
  
Stretch features:
  - Use MTCP to add network support, to download new images straight
    from inside the game
  - Mouse support
  - Integrated MIDI player, to play background music while you work
  
==============================================================================
File formats:
==============================================================================

Picture file format:
Header:
  - 2 bytes - "DP"
  - 2 bytes - x resolution
  - 2 bytes - y resolution
  - 1 bytes - category:
              0 - uncategorized
              1 - miscellaneous
              2 - landscape
              3 - animal
              4 - fantasy
              5 - abstract
              7 - pattern
              >7 - unknown.  Newer versions may have category values >7
  - 32 bytes - picture name.  Shown on gallery, not on in-progress work
  - 1 byte  - number of colors in the palette (1-64)
  - 1 byte  - compression type:
              0 - uncompressed
              1 - run length encoded
  - 192 bytes - color palette (64 sets of R,G,B).  If there are fewer than 64 colors,
                extra colors should be set to 0, 0, 0
  - 23 bytes - padding to bring the total to 256 bytes
Data:
  - an (x * y) grid of image data, read from left to right, top to bottom.  The data
    itself can be run length encoded.  If the upper two bits are 00, then the lower six
    bits specify the color number of the location.  If the uppermost bit is 1,
    then the next byte specifies the number of times to repeat the color
    and the lower six bits of the first byte specifies the color number.  Runs of up
    to 255 can be created.
    
    Example:
    00110000 - 1 square of color 48
    00100000 00001000 - 1 square of color 32, 1 square of color 8
    11010000 00001100 - 12 squares of color 16
    
    
Progress file format:
  The progress file has the same name as the picture file, with the extension .inp.
  
Header:
  - 2 bytes - "PR"
  - 12 bytes - name of original picture file (just in case we need it)
  - 2 bytes - x resolution
  - 2 bytes - y resolution
  - 4 bytes - elapsed time in seconds
  - 4 bytes - number of mistakes made
  - 4 bytes - progress (number of correctly placed colors)
  - 1 byte -  the drawing style set at the time of the save
  - 33 bytes - padding to bring the total to 64 bytes

Data:
  - (x * y ) * 4 bytes - an array of positions (x, y), specifying the order of
    placement of *correct* colors.  Used to 'replay' the player's progress at the
    end of a successfully created puzzle.  
  - x * y bytes - an array of 'mistakes'.  For each position of the picture,
    if the value is 0 then the square is correct, otherwise the value is the
    color actually currently in the square.

Rough estimate of non-Allegro malloc()ed memory:
  Picture - 50 bytes
  ColorSquare - 6 bytes
  OrderItem - 4 bytes


  pic_squares   (pic_width * pic_height) * 6 bytes
  draw_order    (pic_width * pic_height) * 4 bytes
  mistakes      (pic_width * pic_height) bytes

For a 320x200 image, a total of 704,000 bytes is malloc()ed.

Rough estimate of allocated BITMAPs:

Note: Bitmaps are very dynamic in size.  The struct has 44 bytes of 
      fixed data, some data based on the size of the image, and a 
      void pointer to extra data.  The numbers below are therefore estimates

There are currently 18 disk bitmaps and 2 memory bitmaps.  The memory bitmaps
are the size of the screen.  

Fixed memory used by bitmaps: 792 bytes x 18 bitmaps
Dynamic memory estimate used by bitmaps:  
  bglower.pcx:    6,541 bytes
  bg_right.pcx:  22,400 bytes
  buttons.pcx:    4,444 bytes
  drawcurs.pcx:     132 bytes
  holygoat.pcx   64,200 bytes
  lg_cross.pcx    7,876 bytes
  lg_dia.pcx      7,876 bytes
  lg_pal.pcx      7,876 bytes
  mainarea.pcx   35,870 bytes
  numbers.pcx     7,876 bytes
  nums_hi.pcx     7,876 bytes
  pagebutn.pcx    1,122 bytes
  pal_col.pcx     1,377 bytes
  palcurs.pcx       187 bytes
  propfont.pcx    2,835 bytes
  sm_pal.pcx      4,301 bytes
  titlebox.pcx   12,880 bytes
  wrong.pcx         132 bytes
  double buffer  64,200 bytes
  title buffer   64,200 bytes
  structures     14,256 bytes
-------------------------------
  Total:        338,457 bytes

Malloc data + bitmap data = ~1MB
The actual number is going to be higher.  There's other structures in Allegro
plus DPMI stuff./10

Total phys + virtual used = ~2MB

